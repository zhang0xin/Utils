.                   命令可以让我们重复上次的修改
=                   自动缩进
dt                  删除到
p                   光标后粘贴
P                   光标前粘贴
J                   拼接下一行
~                   反转大小写
*                   向下搜索光标所在词。
#                   向上搜索光标所在词。
ci', di', yi'       修改、剪切或复制'之间的内容。
ca', da', ya'       修改、剪切或复制'之间的内容，包含'。
ci", di", yi"       修改、剪切或复制"之间的内容。
ca", da", ya"       修改、剪切或复制"之间的内容，包含"。
ci(, di(, yi(       修改、剪切或复制()之间的内容。
ca(, da(, ya(       修改、剪切或复制()之间的内容，包含()。
ci[, di[, yi[       修改、剪切或复制[]之间的内容。
ca[, da[, ya[       修改、剪切或复制[]之间的内容，包含[]。
ci{, di{, yi{       修改、剪切或复制{}之间的内容。
ca{, da{, ya{       修改、剪切或复制{}之间的内容，包含{}。
ci<, di<, yi<       修改、剪切或复制<>之间的内容。
ca<, da<, ya<       修改、剪切或复制<>之间的内容，包含<>。

#################### 可视模式 ########################
<C-v>        激活面向列块的可视模式
gv           重选上次的高亮选区
o            切换高亮选区的活动端

####################    宏   ########################
.            重复上一个编辑动作
qa           开始录制宏a（键盘操作记录）,a-z可用作宏的名：字
qA           追加宏到：a
q            停止录制
@a           播放宏a
@@           来重复最近调用过的宏

#################### 复合命令 ########################
C     =     c$
s     =     cl
S     =     ^c
I     =     ^i
A     =     $a
o     =     A<CR>
O     =     ko

####################   查找   ########################
目的                       操作                   重复    回退
做出一个修改               {edit}                 .       u
在行内查找下一指定字符      f{char}/t{char}        ;       ,
在行内查找上一指定字符      F{char}/T{char}        ;       ,
在行内查找上一指定字符      *                      n       N
在文档中查找下一处匹配项    /pattern<CR>           n       N
在文档中查找上一处匹配项    ?pattern<CR>           n       N
执行替换                  :s/target/replacement   &      u
执行一系列修改             qx{changes}q           @x      u


#################### 成对对象 ########################
a) 或 ab        一对圆括号(parentheses)
i) 或 ib        圆括号(parentheses) 内部
a} 或 aB        一对花括号{braces}
i} 或 iB        花括号{braces} 内部
a]              一对方括号[brackets]
i]              方括号[brackets] 内部
a>              一对尖括号 <angle brackets>
i>              尖括号 <angle brackets> 内部
a'              一对单引号'single quotes'
i'              单引号'single quotes' 内部
a"              一对双引号"double quotes"
i"              双引号"double quotes" 内部
a`              一对反引号`backticks`
i`              反引号`backticks` 内部
at              一对XML 标签<xml>tags</xml>
it              XML 标签内部

#################### 文本对象 ########################
文本对象        选择范围
iw             当前单词
aw             当前单词及一个空格
iW             当前字串
aW             当前字串及一个空格
is             当前句子
as             当前句子及一个空格
ip             当前段落
ap             当前段落及一个空行

####################   标记   ########################
m{a-z}:            标记光标所在位置，局部标记，只用于当前文件
m{A-Z}:            标记光标所在位置，全局标记。标记之后，退出Vim，
                   重新启动，标记仍然有效。
m`.                移动到上次修改的地方
`{a-z}:            移动到标记位置。
'{a-z}:            移动到标记行的行首。
`{0-9}：           回到上[2-10]次关闭vim时最后离开的位置。
``                 当前文件中上次跳转动作之前的位置,精确到列
`"                 上次离开的地方,精确到行
`.                 上次修改的地方
`^                 上次插入的地方
`[                 上次修改或复制的起始位置
`]                 上次修改或复制的结束位置
`<                 上次高亮选区的起始位置
`>                 上次高亮选区的结束位置
:marks             显示所有标记。
:delmarks a b      删除标记a和b。
:delmarks a-c      删除标记a、b和c。
:delmarks a c-f    删除标记a、c、d、e、f。
:delmarks!         删除当前缓冲区的所有标记。

#################### 寄存器 ########################
"ayy               复制整行到寄存器a
"ap                从寄存器a中粘贴
"0                 复制专用寄存器y命令使用寄存器
"_                 黑洞寄存器，不保存任何副本
"+                 系统剪贴板
"=                 表达式寄存器, 我们可以输入一段Vim 脚本表达式并按<CR> 执行，
                   如果返回的是字符串（或者可被强制转换成字符串的数据），Vim 将会使用它。
"%                 当前文件名
"#                 轮换文件名
".                 上次插入的文本
":                 上次执行的Ex 命令
"/                 上次查找的模式
"a 到 "z           有名寄存器

#################### 光标移动 ########################
h或退格:           左移一个字符；
l或空格:           右移一个字符；
j:                 下移一行；
k:                 上移一行；
gj:                移动到一段内的下一行；
gk:                移动到一段内的上一行；
+或Enter:          把光标移至下一行第一个非空白字符。
-:                 把光标移至上一行第一个非空白字符。
w:                 前移一个单词，光标停在下一个单词开头；
W:                 移动下一个单词开头，但忽略一些标点；
e:                 前移一个单词，光标停在下一个单词末尾；
E:                 移动到下一个单词末尾，如果词尾有标点，则移动到标点；
b:                 后移一个单词，光标停在上一个单词开头；
B:                 移动到上一个单词开头，忽略一些标点；
ge:                后移一个单词，光标停在上一个单词末尾；
gE:                同 ge ，不过‘单词’包含单词相邻的标点。
(:                 前移1句。
):                 后移1句。
{:                 前移1段。
}:                 后移1段。
0:                 移动到行首。
g0:                移到光标所在屏幕行行首。
^:                 移动到本行第一个非空白字符。
g^:                同 ^ ，但是移动到当前屏幕行第一个非空字符处。
$:                 移动到行尾。
g$:                移动光标所在屏幕行行尾。
n|:                把光标移到递n列上。
nG:                到文件第n行。
:n<cr>             移动到第n行。
:$<cr>             移动到最后一行。
H:                 把光标移到屏幕最顶端一行。
M:                 把光标移到屏幕中间一行。
L:                 把光标移到屏幕最底端一行。
gg:                到文件头部。
G:                 到文件尾部。

#################### 翻屏 ########################
ctrl+b:           上翻一屏。
ctrl+u:           上翻半屏。
ctrl+y:           向上滚动一行。
ctrl+f:           下翻一屏。
ctrl+d:           下翻半屏。
ctrl+e:           向下滚动一行。
n%:               到文件n%的位置。
zz:               将当前行移动到屏幕中央。
zt:               将当前行移动到屏幕顶端。
zb:               将当前行移动到屏幕底端。

#################### 折叠 ########################
zf                创建折叠的命令，可以在一个可视区域上使用该命令；
zd                删除当前行的折叠；
zD                删除当前行的折叠；
zfap              折叠光标所在的段；
zo                打开折叠的文本；
zc                收起折叠；
za                打开/关闭当前折叠；
zr                打开嵌套的折行；
zm                收起嵌套的折行；
zR (zO)           打开所有折行；
zM (zC)           收起所有折行；
zj                跳到下一个折叠处；
zk                跳到上一个折叠处；
zi                enable/disable fold;

################ 编辑模式下快捷键 ####################
Ctrl+w           向前删除一个单词。
Ctrl+h           向前删除一个字符，等同于Backspace。
Ctrl+u           从当前位置移动到命令行开头。
Ctrl+b           移动到命令行开头。
Ctrl+e           移动到命令行末尾。
